var searchIndex = {};
searchIndex["rust_jvm"] = {"doc":"This is a documentation comment for our library.","items":[[0,"logging","rust_jvm","",null,null],[3,"SimpleLogger","rust_jvm::logging","",null,null],[17,"MAX_LOG_LEVEL","","",null,null],[11,"init","","",0,{"inputs":[],"output":{"name":"result"}}],[11,"enabled","","",0,{"inputs":[{"name":"simplelogger"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"log","","",0,{"inputs":[{"name":"simplelogger"},{"name":"logrecord"}],"output":null}],[0,"model","rust_jvm","Structures for the [Java SE 8 JVM class file\nformat](https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html).",null,null],[0,"class_file","rust_jvm::model","The `ClassFile` structure of\n[§4.1](https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.1).",null,null],[3,"FieldInfo","rust_jvm::model::class_file","",null,null],[12,"access_flags","","Mask of flags used to denote access permissions to and properties of\nthis field.",1,null],[12,"name_index","","A valid index into the `constant_pool` table. The `constant_pool` entry\nat that index must be a `ConstantPoolInfo::Utf8` structure representing\na valid unqualified name denoting a field.",1,null],[12,"descriptor_index","","A valid index into the `constant_pool` table. The `constant_pool` entry\nat that index must be a `ConstantPoolInfo::Utf8` structure representing\na valid unqualified name denoting a field.",1,null],[12,"attributes","","The attributes associated with this field.",1,null],[3,"MethodInfo","","",null,null],[12,"access_flags","","Mask of flags used to denote access permissions to and properties of\nthis class or interface. See the documentation for `ClassAccessFlags`\nfor the interpretation of each flag.",2,null],[12,"name_index","","A valid index into the `constant_pool` table. The `constant_pool` entry\nat that index must be a `ConstantPoolInfo::Utf8` structure representing\na valid unqualified name denoting a method.",2,null],[12,"descriptor_index","","A valid index into the `constant_pool` table. The `constant_pool` entry\nat that index must be a `ConstantPoolInfo::Utf8` structure representing\na valid method descriptor.",2,null],[12,"attributes","","The attributes associated with this method.",2,null],[3,"ClassFile","","",null,null],[12,"minor_version","","Minor version number",3,null],[12,"major_version","","Major version number",3,null],[12,"constant_pool","","Table of structures representing various string constants, class and\ninterface names, field names, and other constants. The `constant_pool`\ntable is indexed from 1 to `constant_pool_count - 1`.",3,null],[12,"access_flags","","Mask of flags used to denote access permissions to and properties of\nthis class or interface. See the documentation for `ClassAccessFlags`\nfor the interpretation of each flag.",3,null],[12,"this_class","","A valid index into the `constant_pool` table. The `constant_pool` entry\nat that index must be a `ConstantPoolInfo::Class` structure representing\na valid unqualified name denoting a field.",3,null],[12,"super_class","","For a class, must be either zero or a valid index into the\n`constant_pool` table. If the value of `super_class` is non-zero, then\nthe `constant_pool` entry at that index must be a `ConstantPoolInfo::Class`\nstructure denoting the direct superclass of the class defined by this\nclass file. Neither the direct superclass nor any of its superclasses\nmay have the `ACC_FINAL` flag set in the `access_flags` item of its\n`ClassFile` structure.",3,null],[12,"interfaces","","Each value in `interfaces` mut be a valid index into the `constant_pool`\ntable. The `constant_pool` entry at each value of `interfaces[i]`, where\n`0 ≤ i &lt; interfaces_count`, must be a `ConstantPoolInfo::Class` structure\nrepresenting an interface that is a direct superinterface of this class\nor interface type, in the left-to-right order given in the source for\nthe type.",3,null],[12,"fields","","Contains only those fields declared by this class or interface. Does not\ninclude items representing fields that are inherited from superclasses\nor superinterfaces.",3,null],[12,"methods","","Contains only those methods declared by this class or interface. Does\nnot include items representing methods that are inherited from\nsuperclasses or superinterfaces.",3,null],[12,"attributes","","Contains the attributes of this class.",3,null],[0,"access_flags","","Access flags for various structures in\n[§4.1](https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.1).",null,null],[0,"class_access_flags","rust_jvm::model::class_file::access_flags","Values of access flags for a class or interface.",null,null],[6,"access_flag","rust_jvm::model::class_file::access_flags::class_access_flags","",null,null],[6,"t","","",null,null],[17,"ACC_PUBLIC","","Declared `public`; may be accessed from outside its package.",null,null],[17,"ACC_FINAL","","Declared `final`; no subclasses allowed.",null,null],[17,"ACC_SUPER","","Treat superclass methods specially when invoked by the _invokespecial_\ninstruction.",null,null],[17,"ACC_INTERFACE","","Is an interface, not a class.",null,null],[17,"ACC_ABSTRACT","","Declared `abstract`; must not be instantiated.",null,null],[17,"ACC_SYNTHETIC","","Declared synthetic; not present in the source code.",null,null],[17,"ACC_ANNOTATION","","Declared as an annotation type.",null,null],[17,"ACC_ENUM","","Declared as an `enum` type.",null,null],[0,"inner_class_access_flags","rust_jvm::model::class_file::access_flags","Values of access flags for an inner class.",null,null],[6,"access_flag","rust_jvm::model::class_file::access_flags::inner_class_access_flags","",null,null],[6,"t","","",null,null],[17,"ACC_PUBLIC","","Marked or implicitly `public` in source.",null,null],[17,"ACC_PRIVATE","","Marked `private` in source.",null,null],[17,"ACC_PROTECTED","","Marked `protected` in source.",null,null],[17,"ACC_STATIC","","Marked or implicitly `static` in source.",null,null],[17,"ACC_FINAL","","Marked `final` in source.",null,null],[17,"ACC_INTERFACE","","Was an `interface` in source.",null,null],[17,"ACC_ABSTRACT","","Marked or implicitly `abstract` in source.",null,null],[17,"ACC_SYNTHETIC","","Declared synthetic; not present in the source code.",null,null],[17,"ACC_ANNOTATION","","Declared as an annotation type.",null,null],[17,"ACC_ENUM","","Declared as an `enum` type.",null,null],[0,"field_access_flags","rust_jvm::model::class_file::access_flags","Values of access flags for a field.",null,null],[6,"access_flag","rust_jvm::model::class_file::access_flags::field_access_flags","",null,null],[6,"t","","",null,null],[17,"ACC_PUBLIC","","Declared `public`; may be accessed from outside its package.",null,null],[17,"ACC_PRIVATE","","Declared `private`; usable only within the defining class.",null,null],[17,"ACC_PROTECTED","","Declared `protected`; may be accessed within subclasses.",null,null],[17,"ACC_STATIC","","Declared `static`.",null,null],[17,"ACC_FINAL","","Declared `final`; no subclasses allowed.",null,null],[17,"ACC_VOLATILE","","Declared `volatile`; cannot be cached.",null,null],[17,"ACC_TRANSIENT","","Declared `transient`; not written or read by a persistent object\nmanager.",null,null],[17,"ACC_SYNTHETIC","","Declared synthetic; not present in the source code.",null,null],[17,"ACC_ENUM","","Declared as an element of an `enum`.",null,null],[0,"method_access_flags","rust_jvm::model::class_file::access_flags","Values of access flags for a method.",null,null],[6,"access_flag","rust_jvm::model::class_file::access_flags::method_access_flags","",null,null],[6,"t","","",null,null],[17,"ACC_PUBLIC","","Declared `public`; may be accessed from outside its package.",null,null],[17,"ACC_PRIVATE","","Declared `private`; usable only within the defining class.",null,null],[17,"ACC_PROTECTED","","Declared `protected`; may be accessed within subclasses.",null,null],[17,"ACC_STATIC","","Declared `static`.",null,null],[17,"ACC_FINAL","","Declared `final`; must not be overriden.",null,null],[17,"ACC_SYNCHRONIZED","","Declared `synchronized`; invocation is wrapped by a monitor use.",null,null],[17,"ACC_BRIDGE","","A bridge method, generated by the compiler.",null,null],[17,"ACC_VARARGS","","Declared with variable number of arguments.",null,null],[17,"ACC_NATIVE","","Declared `native`; implemented in a language other than Java.",null,null],[17,"ACC_ABSTRACT","","Declared `abstract`; no implementation is provided.",null,null],[17,"ACC_STRICT","","Declared `strictfp`; floating-point mode is FP-strict.",null,null],[17,"ACC_SYNTHETIC","","Declared synthetic; not present in the source code.",null,null],[0,"parameter_access_flags","rust_jvm::model::class_file::access_flags","Values of access flags for parameters.",null,null],[6,"access_flag","rust_jvm::model::class_file::access_flags::parameter_access_flags","",null,null],[6,"t","","",null,null],[17,"ACC_FINAL","","Indicates that the formal parameter was declared final.",null,null],[17,"ACC_SYNTHETIC","","Indicates that the formal parameter was not explicitly or implicitly\ndeclared in source code, according to the specification of the language\nin which the source code was written (JLS §13.1). (The formal parameter\nis an implementation artifact of the compiler which produced this class\nfile.)",null,null],[17,"ACC_MANDATED","","Indicates that the formal parameter was implicitly declared in source\ncode, according to the specification of the language in which the source\ncode was written (JLS §13.1). (The formal parameter is mandated by a\nlanguage specification, so all compilers for the language must emit it.)",null,null],[6,"u2","rust_jvm::model::class_file::access_flags","",null,null],[0,"attribute","rust_jvm::model::class_file","",null,null],[3,"ExceptionTableEntry","rust_jvm::model::class_file::attribute","Each `ExceptionTableEntry` describes one exception handler in the `code`\narray. The order of the handlers in an `exception_table` array is\nsignificant (§2.10).",null,null],[12,"start_pc","","Indicates the (inclusive) start of the range in the `code` array at\nwhich the exception handler is active. The value of `start_pc` must be a\nvalid index into the `code` array of the opcode of an instruction. The\nexception handler is active in the range `[start_pc, end_pc)`.",4,null],[12,"end_pc","","Indicates the (exclusive) end of the range in the `code` array at which\nthe exception handler is active. The value of `end_pc` must be a valid\nindex into the `code` array of the opcode of an instruction or must be\nequal to the length of the `code` array. The exception handler is active\nin the range `[start_pc, end_pc)`.",4,null],[12,"handler_pc","","The value of the `handler_pc` item indicates the start of the exception\nhandler. The value of the item must be a valid index into the code array\nand must be the index of the opcode of an instruction.",4,null],[12,"catch_type","","If the value of the `catch_type` item is nonzero, it must be a valid\nindex into the `constant_pool` table. The `constant_pool` entry at that\nindex must be a `ConstantPoolInfo::Class` structure representing a class\nof exceptions that this exception handler is designated to catch. The\nexception handler will be called only if the thrown exception is an\ninstance of the given class or one of its subclasses.",4,null],[3,"BootstrapMethod","","",null,null],[12,"bootstrap_method_ref","","An index into the `constant_pool` to a `ConstantPoolInfo::MethodHandle` structure.",5,null],[12,"bootstrap_arguments","","The indices into the `constant_pool` to `ConstantPoolInfo::String`,\n`ConstantPoolInfo::Class`, `ConstantPoolInfo::Integer`,\n`ConstantPoolInfo::Long`, `ConstantPoolInfo::Float`,\n`ConstantPoolInfo::Double`, `ConstantPoolInfo::MethodHandle`, or\n`ConstantPoolInfo::MethodType`.",5,null],[3,"InnerClass","","",null,null],[12,"inner_class_info_index","","",6,null],[12,"outer_class_info_index","","",6,null],[12,"inner_name_index","","",6,null],[12,"inner_class_access_flags","","",6,null],[3,"MethodParameter","","",null,null],[12,"name_index","","",7,null],[12,"access_flags","","",7,null],[3,"LineNumberInfo","","",null,null],[12,"start_pc","","",8,null],[12,"line_number","","",8,null],[3,"LocalVariableInfo","","",null,null],[12,"start_pc","","",9,null],[12,"length","","",9,null],[12,"name_index","","",9,null],[12,"descriptor_index","","",9,null],[12,"index","","",9,null],[3,"LocalVariableTypeInfo","","",null,null],[12,"start_pc","","",10,null],[12,"length","","",10,null],[12,"name_index","","",10,null],[12,"signature_index","","",10,null],[12,"index","","",10,null],[4,"AttributeInfo","","Attributes are used in the `ClassFile`, `FieldInfo`, `MethodInfo`, and\n`AttributeInfo::Code` structures of the class file format (§4.1, §4.5, §4.6,\n§4.7.3).",null,null],[13,"ConstantValue","","",11,null],[12,"constant_value_index","rust_jvm::model::class_file::attribute::AttributeInfo","",11,null],[13,"Code","rust_jvm::model::class_file::attribute","",11,null],[12,"max_stack","rust_jvm::model::class_file::attribute::AttributeInfo","",11,null],[12,"max_locals","","",11,null],[12,"code","","",11,null],[12,"exception_table","","",11,null],[12,"attributes","","",11,null],[13,"StackMapTable","rust_jvm::model::class_file::attribute","",11,null],[12,"entries","rust_jvm::model::class_file::attribute::AttributeInfo","",11,null],[13,"Exceptions","rust_jvm::model::class_file::attribute","",11,null],[12,"exception_index_table","rust_jvm::model::class_file::attribute::AttributeInfo","Contains indices into the `constant_pool` table for the class type\nthat the method is declared to throw.",11,null],[13,"BootstrapMethods","rust_jvm::model::class_file::attribute","",11,null],[12,"bootstrap_methods","rust_jvm::model::class_file::attribute::AttributeInfo","",11,null],[13,"InnerClasses","rust_jvm::model::class_file::attribute","",11,null],[12,"classes","rust_jvm::model::class_file::attribute::AttributeInfo","",11,null],[13,"EnclosingMethod","rust_jvm::model::class_file::attribute","",11,null],[12,"class_index","rust_jvm::model::class_file::attribute::AttributeInfo","",11,null],[12,"method_index","","",11,null],[13,"Synthetic","rust_jvm::model::class_file::attribute","",11,null],[13,"Signature","","",11,null],[12,"signature_index","rust_jvm::model::class_file::attribute::AttributeInfo","A valid index into the `constant_pool` table for a `ConstantPoolInfo::Utf8` structure.",11,null],[13,"RuntimeVisibleAnnotations","rust_jvm::model::class_file::attribute","",11,null],[12,"annotations","rust_jvm::model::class_file::attribute::AttributeInfo","",11,null],[13,"RuntimeInvisibleAnnotations","rust_jvm::model::class_file::attribute","",11,null],[12,"annotations","rust_jvm::model::class_file::attribute::AttributeInfo","",11,null],[13,"RuntimeVisibleParameterAnnotations","rust_jvm::model::class_file::attribute","",11,null],[12,"parameter_annotations","rust_jvm::model::class_file::attribute::AttributeInfo","",11,null],[13,"RuntimeInvisibleParameterAnnotations","rust_jvm::model::class_file::attribute","",11,null],[12,"parameter_annotations","rust_jvm::model::class_file::attribute::AttributeInfo","",11,null],[13,"RuntimeVisibleTypeAnnotations","rust_jvm::model::class_file::attribute","",11,null],[12,"annotations","rust_jvm::model::class_file::attribute::AttributeInfo","",11,null],[13,"RuntimeInvisibleTypeAnnotations","rust_jvm::model::class_file::attribute","",11,null],[12,"annotations","rust_jvm::model::class_file::attribute::AttributeInfo","",11,null],[13,"AnnotationDefault","rust_jvm::model::class_file::attribute","",11,null],[12,"default_value","rust_jvm::model::class_file::attribute::AttributeInfo","",11,null],[13,"MethodParameters","rust_jvm::model::class_file::attribute","",11,null],[12,"parameters","rust_jvm::model::class_file::attribute::AttributeInfo","",11,null],[13,"SourceFile","rust_jvm::model::class_file::attribute","",11,null],[12,"sourcefile_index","rust_jvm::model::class_file::attribute::AttributeInfo","",11,null],[13,"SourceDebugExtension","rust_jvm::model::class_file::attribute","",11,null],[12,"debug_extension","rust_jvm::model::class_file::attribute::AttributeInfo","",11,null],[13,"LineNumberTable","rust_jvm::model::class_file::attribute","",11,null],[12,"line_number_table","rust_jvm::model::class_file::attribute::AttributeInfo","",11,null],[13,"LocalVariableTable","rust_jvm::model::class_file::attribute","",11,null],[12,"local_variable_table","rust_jvm::model::class_file::attribute::AttributeInfo","",11,null],[13,"LocalVariableTypeTable","rust_jvm::model::class_file::attribute","",11,null],[12,"local_variable_type_table","rust_jvm::model::class_file::attribute::AttributeInfo","",11,null],[13,"Deprecated","rust_jvm::model::class_file::attribute","",11,null],[13,"Unknown","","",11,null],[12,"attribute_name_index","rust_jvm::model::class_file::attribute::AttributeInfo","A valid index into the `constant_pool` table. The `constant_pool`\nentry at that index must be a valid `ConstantPoolInfo::Utf8`\nstructure representing the name of the attribute.",11,null],[12,"info","","The data for this attribute.",11,null],[0,"annotation","rust_jvm::model::class_file::attribute","",null,null],[3,"ElementValuePair","rust_jvm::model::class_file::attribute::annotation","",null,null],[12,"element_name_index","","",12,null],[12,"value","","",12,null],[3,"LocalVariableTargetInfo","","",null,null],[12,"start_pc","","",13,null],[12,"length","","",13,null],[12,"index","","",13,null],[3,"Annotation","","",null,null],[12,"type_index","","An index into the `constant_pool` table for a `ConstantPoolInfo::Utf8` structure.",14,null],[12,"element_value_pairs","","",14,null],[3,"TypePathPart","","",null,null],[12,"type_path_kind","","",15,null],[12,"type_argument_index","","",15,null],[3,"TypePath","","",null,null],[12,"path","","",16,null],[3,"TypeAnnotation","","",null,null],[12,"target_info","","",17,null],[12,"target_path","","",17,null],[12,"type_index","","",17,null],[12,"element_value_pairs","","",17,null],[0,"element_value","","",null,null],[4,"ElementValue","rust_jvm::model::class_file::attribute::annotation::element_value","",null,null],[13,"Byte","","",18,null],[12,"const_value_index","rust_jvm::model::class_file::attribute::annotation::element_value::ElementValue","",18,null],[13,"Char","rust_jvm::model::class_file::attribute::annotation::element_value","",18,null],[12,"const_value_index","rust_jvm::model::class_file::attribute::annotation::element_value::ElementValue","",18,null],[13,"Double","rust_jvm::model::class_file::attribute::annotation::element_value","",18,null],[12,"const_value_index","rust_jvm::model::class_file::attribute::annotation::element_value::ElementValue","",18,null],[13,"Float","rust_jvm::model::class_file::attribute::annotation::element_value","",18,null],[12,"const_value_index","rust_jvm::model::class_file::attribute::annotation::element_value::ElementValue","",18,null],[13,"Int","rust_jvm::model::class_file::attribute::annotation::element_value","",18,null],[12,"const_value_index","rust_jvm::model::class_file::attribute::annotation::element_value::ElementValue","",18,null],[13,"Long","rust_jvm::model::class_file::attribute::annotation::element_value","",18,null],[12,"const_value_index","rust_jvm::model::class_file::attribute::annotation::element_value::ElementValue","",18,null],[13,"Short","rust_jvm::model::class_file::attribute::annotation::element_value","",18,null],[12,"const_value_index","rust_jvm::model::class_file::attribute::annotation::element_value::ElementValue","",18,null],[13,"Boolean","rust_jvm::model::class_file::attribute::annotation::element_value","",18,null],[12,"const_value_index","rust_jvm::model::class_file::attribute::annotation::element_value::ElementValue","",18,null],[13,"String","rust_jvm::model::class_file::attribute::annotation::element_value","",18,null],[12,"const_value_index","rust_jvm::model::class_file::attribute::annotation::element_value::ElementValue","",18,null],[13,"Enum","rust_jvm::model::class_file::attribute::annotation::element_value","",18,null],[12,"type_name_index","rust_jvm::model::class_file::attribute::annotation::element_value::ElementValue","",18,null],[12,"const_name_index","","",18,null],[13,"Class","rust_jvm::model::class_file::attribute::annotation::element_value","",18,null],[12,"class_info_index","rust_jvm::model::class_file::attribute::annotation::element_value::ElementValue","",18,null],[13,"Annotation","rust_jvm::model::class_file::attribute::annotation::element_value","",18,null],[12,"annotation_value","rust_jvm::model::class_file::attribute::annotation::element_value::ElementValue","",18,null],[13,"Array","rust_jvm::model::class_file::attribute::annotation::element_value","",18,null],[12,"values","rust_jvm::model::class_file::attribute::annotation::element_value::ElementValue","",18,null],[4,"Tag","rust_jvm::model::class_file::attribute::annotation::element_value","",null,null],[13,"Byte","","",19,null],[13,"Char","","",19,null],[13,"Double","","",19,null],[13,"Float","","",19,null],[13,"Int","","",19,null],[13,"Long","","",19,null],[13,"Short","","",19,null],[13,"Boolean","","",19,null],[13,"String","","",19,null],[13,"Enum","","",19,null],[13,"Class","","",19,null],[13,"Annotation","","",19,null],[13,"Array","","",19,null],[13,"Unknown","","",19,null],[11,"fmt","","",18,{"inputs":[{"name":"elementvalue"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"tag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",19,{"inputs":[{"name":"u1"}],"output":{"name":"self"}}],[0,"target_type","rust_jvm::model::class_file::attribute::annotation","",null,null],[4,"TargetInfo","rust_jvm::model::class_file::attribute::annotation::target_type","",null,null],[13,"TypeParameter","","",20,null],[12,"type_parameter_index","rust_jvm::model::class_file::attribute::annotation::target_type::TargetInfo","",20,null],[13,"Supertype","rust_jvm::model::class_file::attribute::annotation::target_type","",20,null],[12,"supertype_index","rust_jvm::model::class_file::attribute::annotation::target_type::TargetInfo","",20,null],[13,"TypeParameterBound","rust_jvm::model::class_file::attribute::annotation::target_type","",20,null],[12,"type_parameter_index","rust_jvm::model::class_file::attribute::annotation::target_type::TargetInfo","",20,null],[12,"bound_index","","",20,null],[13,"Empty","rust_jvm::model::class_file::attribute::annotation::target_type","",20,null],[13,"FormalParameter","","",20,null],[12,"formal_parameter_index","rust_jvm::model::class_file::attribute::annotation::target_type::TargetInfo","",20,null],[13,"Throws","rust_jvm::model::class_file::attribute::annotation::target_type","",20,null],[12,"throws_type_index","rust_jvm::model::class_file::attribute::annotation::target_type::TargetInfo","",20,null],[13,"LocalVariable","rust_jvm::model::class_file::attribute::annotation::target_type","",20,null],[12,"table","rust_jvm::model::class_file::attribute::annotation::target_type::TargetInfo","",20,null],[13,"Catch","rust_jvm::model::class_file::attribute::annotation::target_type","",20,null],[12,"exception_table_index","rust_jvm::model::class_file::attribute::annotation::target_type::TargetInfo","",20,null],[13,"Offset","rust_jvm::model::class_file::attribute::annotation::target_type","",20,null],[12,"offset","rust_jvm::model::class_file::attribute::annotation::target_type::TargetInfo","",20,null],[13,"TypeArgument","rust_jvm::model::class_file::attribute::annotation::target_type","",20,null],[12,"offset","rust_jvm::model::class_file::attribute::annotation::target_type::TargetInfo","",20,null],[12,"type_argument_index","","",20,null],[4,"Tag","rust_jvm::model::class_file::attribute::annotation::target_type","",null,null],[13,"TypeParameter","","",21,null],[13,"Supertype","","",21,null],[13,"TypeParameterBound","","",21,null],[13,"Empty","","",21,null],[13,"FormalParameter","","",21,null],[13,"Throws","","",21,null],[13,"LocalVariable","","",21,null],[13,"Catch","","",21,null],[13,"Offset","","",21,null],[13,"TypeArgument","","",21,null],[13,"Unknown","","",21,null],[11,"fmt","","",20,{"inputs":[{"name":"targetinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",21,{"inputs":[{"name":"u1"}],"output":{"name":"self"}}],[11,"fmt","rust_jvm::model::class_file::attribute::annotation","",12,{"inputs":[{"name":"elementvaluepair"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"localvariabletargetinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"annotation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"typepathpart"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"typepath"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"typeannotation"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"stack_map_frame","rust_jvm::model::class_file::attribute","",null,null],[4,"StackMapFrame","rust_jvm::model::class_file::attribute::stack_map_frame","A `StackMapFrame` variant stores a relative bytecode offset, the\nverification types (§4.10.1.2) for the local variables, and the verification\ntypes for the operand stack. Each variant stores a bytecode offset _relative\nto the previous_ `StackMapFrame`. The actual bytecode offset can be\ncalculated as described in (§4.7.4).",null,null],[13,"SameFrame","","",22,null],[12,"offset_delta","rust_jvm::model::class_file::attribute::stack_map_frame::StackMapFrame","",22,null],[13,"SameLocals1StackItemFrame","rust_jvm::model::class_file::attribute::stack_map_frame","",22,null],[12,"offset_delta","rust_jvm::model::class_file::attribute::stack_map_frame::StackMapFrame","",22,null],[12,"stack_item","","",22,null],[13,"SameLocals1StackItemFrameExtended","rust_jvm::model::class_file::attribute::stack_map_frame","",22,null],[12,"offset_delta","rust_jvm::model::class_file::attribute::stack_map_frame::StackMapFrame","",22,null],[12,"stack_item","","",22,null],[13,"ChopFrame","rust_jvm::model::class_file::attribute::stack_map_frame","",22,null],[12,"offset_delta","rust_jvm::model::class_file::attribute::stack_map_frame::StackMapFrame","",22,null],[12,"num_chopped","","",22,null],[13,"SameFrameExtended","rust_jvm::model::class_file::attribute::stack_map_frame","",22,null],[12,"offset_delta","rust_jvm::model::class_file::attribute::stack_map_frame::StackMapFrame","",22,null],[13,"AppendFrame","rust_jvm::model::class_file::attribute::stack_map_frame","",22,null],[12,"offset_delta","rust_jvm::model::class_file::attribute::stack_map_frame::StackMapFrame","",22,null],[12,"locals","","",22,null],[13,"FullFrame","rust_jvm::model::class_file::attribute::stack_map_frame","",22,null],[12,"offset_delta","rust_jvm::model::class_file::attribute::stack_map_frame::StackMapFrame","",22,null],[12,"locals","","",22,null],[12,"stack","","",22,null],[4,"Tag","rust_jvm::model::class_file::attribute::stack_map_frame","",null,null],[13,"SameFrame","","",23,null],[13,"SameLocals1StackItemFrame","","",23,null],[13,"SameLocals1StackItemFrameExtended","","",23,null],[13,"ChopFrame","","",23,null],[13,"SameFrameExtended","","",23,null],[13,"AppendFrame","","",23,null],[13,"FullFrame","","",23,null],[13,"Reserved","","",23,null],[13,"Unknown","","",23,null],[0,"verification_type_info","","",null,null],[4,"VerificationTypeInfo","rust_jvm::model::class_file::attribute::stack_map_frame::verification_type_info","",null,null],[13,"Top","","",24,null],[13,"Integer","","",24,null],[13,"Float","","",24,null],[13,"Long","","",24,null],[13,"Double","","",24,null],[13,"Null","","",24,null],[13,"UninitializedThis","","",24,null],[13,"Object","","",24,null],[12,"class_index","rust_jvm::model::class_file::attribute::stack_map_frame::verification_type_info::VerificationTypeInfo","",24,null],[13,"Uninitialized","rust_jvm::model::class_file::attribute::stack_map_frame::verification_type_info","",24,null],[12,"offset","rust_jvm::model::class_file::attribute::stack_map_frame::verification_type_info::VerificationTypeInfo","The offset in the `code` array of the `Code` attribute that contains\nthis `StackMapTable` attribute, of the _new_ instruction that\ncreated the object stored in the location.",24,null],[4,"Tag","rust_jvm::model::class_file::attribute::stack_map_frame::verification_type_info","",null,null],[13,"Top","","",25,null],[13,"Integer","","",25,null],[13,"Float","","",25,null],[13,"Long","","",25,null],[13,"Double","","",25,null],[13,"Null","","",25,null],[13,"UninitializedThis","","",25,null],[13,"Object","","",25,null],[13,"Uninitialized","","",25,null],[13,"Unknown","","",25,null],[11,"fmt","","",24,{"inputs":[{"name":"verificationtypeinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"fmt","","",25,{"inputs":[{"name":"tag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",25,{"inputs":[{"name":"u1"}],"output":{"name":"self"}}],[11,"fmt","rust_jvm::model::class_file::attribute::stack_map_frame","",22,{"inputs":[{"name":"stackmapframe"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"fmt","","",23,{"inputs":[{"name":"tag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",23,{"inputs":[{"name":"u1"}],"output":{"name":"self"}}],[11,"fmt","rust_jvm::model::class_file::attribute","",4,{"inputs":[{"name":"exceptiontableentry"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"bootstrapmethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"innerclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"methodparameter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"linenumberinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"localvariableinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"localvariabletypeinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"attributeinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"constant_pool","rust_jvm::model::class_file","Contains structures to describe the constant pool\n[§4.4](https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4).",null,null],[4,"Tag","rust_jvm::model::class_file::constant_pool","Type-safe representation of constant pool tags [Table\n4.4-A](https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4-140).",null,null],[13,"Class","","",26,null],[13,"FieldRef","","",26,null],[13,"MethodRef","","",26,null],[13,"InterfaceMethodRef","","",26,null],[13,"String","","",26,null],[13,"Integer","","",26,null],[13,"Float","","",26,null],[13,"Long","","",26,null],[13,"Double","","",26,null],[13,"NameAndType","","",26,null],[13,"Utf8","","",26,null],[13,"MethodHandle","","",26,null],[13,"MethodType","","",26,null],[13,"InvokeDynamic","","",26,null],[13,"Unknown","","",26,null],[4,"MethodReference","","",null,null],[13,"GetField","","",27,null],[12,"reference_index","rust_jvm::model::class_file::constant_pool::MethodReference","",27,null],[13,"GetStatic","rust_jvm::model::class_file::constant_pool","",27,null],[12,"reference_index","rust_jvm::model::class_file::constant_pool::MethodReference","",27,null],[13,"PutField","rust_jvm::model::class_file::constant_pool","",27,null],[12,"reference_index","rust_jvm::model::class_file::constant_pool::MethodReference","",27,null],[13,"PutStatic","rust_jvm::model::class_file::constant_pool","",27,null],[12,"reference_index","rust_jvm::model::class_file::constant_pool::MethodReference","",27,null],[13,"InvokeVirtual","rust_jvm::model::class_file::constant_pool","",27,null],[12,"reference_index","rust_jvm::model::class_file::constant_pool::MethodReference","",27,null],[13,"InvokeStatic","rust_jvm::model::class_file::constant_pool","",27,null],[12,"reference_index","rust_jvm::model::class_file::constant_pool::MethodReference","",27,null],[13,"InvokeSpecial","rust_jvm::model::class_file::constant_pool","",27,null],[12,"reference_index","rust_jvm::model::class_file::constant_pool::MethodReference","",27,null],[13,"NewInvokeSpecial","rust_jvm::model::class_file::constant_pool","",27,null],[12,"reference_index","rust_jvm::model::class_file::constant_pool::MethodReference","",27,null],[13,"InvokeInterface","rust_jvm::model::class_file::constant_pool","",27,null],[12,"reference_index","rust_jvm::model::class_file::constant_pool::MethodReference","",27,null],[4,"ConstantPoolInfo","rust_jvm::model::class_file::constant_pool","",null,null],[13,"Class","","The `CONSTANT_Class_info` structure\n[§4.4.1](https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4.1).",28,null],[12,"name_index","rust_jvm::model::class_file::constant_pool::ConstantPoolInfo","",28,null],[13,"FieldRef","rust_jvm::model::class_file::constant_pool","",28,null],[12,"class_index","rust_jvm::model::class_file::constant_pool::ConstantPoolInfo","",28,null],[12,"name_and_type_index","","",28,null],[13,"MethodRef","rust_jvm::model::class_file::constant_pool","",28,null],[12,"class_index","rust_jvm::model::class_file::constant_pool::ConstantPoolInfo","",28,null],[12,"name_and_type_index","","",28,null],[13,"InterfaceMethodRef","rust_jvm::model::class_file::constant_pool","",28,null],[12,"class_index","rust_jvm::model::class_file::constant_pool::ConstantPoolInfo","",28,null],[12,"name_and_type_index","","",28,null],[13,"String","rust_jvm::model::class_file::constant_pool","",28,null],[12,"string_index","rust_jvm::model::class_file::constant_pool::ConstantPoolInfo","",28,null],[13,"Integer","rust_jvm::model::class_file::constant_pool","",28,null],[12,"bytes","rust_jvm::model::class_file::constant_pool::ConstantPoolInfo","",28,null],[13,"Float","rust_jvm::model::class_file::constant_pool","",28,null],[12,"bytes","rust_jvm::model::class_file::constant_pool::ConstantPoolInfo","",28,null],[13,"Long","rust_jvm::model::class_file::constant_pool","",28,null],[12,"high_bytes","rust_jvm::model::class_file::constant_pool::ConstantPoolInfo","",28,null],[12,"low_bytes","","",28,null],[13,"Double","rust_jvm::model::class_file::constant_pool","",28,null],[12,"high_bytes","rust_jvm::model::class_file::constant_pool::ConstantPoolInfo","",28,null],[12,"low_bytes","","",28,null],[13,"NameAndType","rust_jvm::model::class_file::constant_pool","",28,null],[12,"name_index","rust_jvm::model::class_file::constant_pool::ConstantPoolInfo","",28,null],[12,"descriptor_index","","",28,null],[13,"Utf8","rust_jvm::model::class_file::constant_pool","",28,null],[12,"bytes","rust_jvm::model::class_file::constant_pool::ConstantPoolInfo","",28,null],[13,"MethodHandle","rust_jvm::model::class_file::constant_pool","",28,null],[12,"reference","rust_jvm::model::class_file::constant_pool::ConstantPoolInfo","",28,null],[13,"MethodType","rust_jvm::model::class_file::constant_pool","",28,null],[12,"descriptor_index","rust_jvm::model::class_file::constant_pool::ConstantPoolInfo","",28,null],[13,"InvokeDynamic","rust_jvm::model::class_file::constant_pool","",28,null],[12,"bootstrap_method_attr_index","rust_jvm::model::class_file::constant_pool::ConstantPoolInfo","A valid index into the `bootstrap_methods` array of the bootstrap method table.",28,null],[12,"name_and_type_index","","A valid index into the `constant_pool` table. The `constant_pool` entry at that index\nmust be a valid `ConstantPoolInfo::Utf8` structure representing the name of the\nattribute.",28,null],[13,"Unusable","rust_jvm::model::class_file::constant_pool","Indicates an unusable constant pool entry.",28,null],[0,"tags","","Values of constant pool tags [Table\n4.4-A](https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4-140).",null,null],[17,"CLASS","rust_jvm::model::class_file::constant_pool::tags","",null,null],[17,"FIELD_REF","","",null,null],[17,"METHOD_REF","","",null,null],[17,"INTERFACE_METHOD_REF","","",null,null],[17,"STRING","","",null,null],[17,"INTEGER","","",null,null],[17,"FLOAT","","",null,null],[17,"LONG","","",null,null],[17,"DOUBLE","","",null,null],[17,"NAME_AND_TYPE","","",null,null],[17,"UTF_8","","",null,null],[17,"METHOD_HANDLE","","",null,null],[17,"METHOD_TYPE","","",null,null],[17,"INVOKE_DYNAMIC","","",null,null],[0,"reference_kind","rust_jvm::model::class_file::constant_pool","",null,null],[4,"Tag","rust_jvm::model::class_file::constant_pool::reference_kind","",null,null],[13,"GetField","","",29,null],[13,"GetStatic","","",29,null],[13,"PutField","","",29,null],[13,"PutStatic","","",29,null],[13,"InvokeVirtual","","",29,null],[13,"InvokeStatic","","",29,null],[13,"InvokeSpecial","","",29,null],[13,"NewInvokeSpecial","","",29,null],[13,"InvokeInterface","","",29,null],[13,"Unknown","","",29,null],[0,"tags","","",null,null],[17,"GET_FIELD","rust_jvm::model::class_file::constant_pool::reference_kind::tags","",null,null],[17,"GET_STATIC","","",null,null],[17,"PUT_FIELD","","",null,null],[17,"PUT_STATIC","","",null,null],[17,"INVOKE_VIRTUAL","","",null,null],[17,"INVOKE_STATIC","","",null,null],[17,"INVOKE_SPECIAL","","",null,null],[17,"NEW_INVOKE_SPECIAL","","",null,null],[17,"INVOKE_INTERFACE","","",null,null],[11,"eq","rust_jvm::model::class_file::constant_pool::reference_kind","",29,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"fmt","","",29,{"inputs":[{"name":"tag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",29,{"inputs":[{"name":"u1"}],"output":{"name":"self"}}],[6,"constant_pool_index","rust_jvm::model::class_file::constant_pool","",null,null],[6,"ConstantPool","","The constant pool\n[§4.4](https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4).",null,null],[11,"eq","","",26,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"tag"},{"name":"tag"}],"output":{"name":"bool"}}],[11,"fmt","","",26,{"inputs":[{"name":"tag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",26,{"inputs":[{"name":"u1"}],"output":{"name":"self"}}],[11,"eq","","",27,{"inputs":[{"name":"methodreference"},{"name":"methodreference"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"methodreference"},{"name":"methodreference"}],"output":{"name":"bool"}}],[11,"fmt","","",27,{"inputs":[{"name":"methodreference"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"constantpoolinfo"},{"name":"constantpoolinfo"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"constantpoolinfo"},{"name":"constantpoolinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"constantpoolinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"tag","","",28,{"inputs":[{"name":"constantpoolinfo"}],"output":{"name":"tag"}}],[11,"from_zero_indexed_vec","","",30,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[6,"u1","rust_jvm::model::class_file","Represents an unsigned one-byte quantity.",null,null],[6,"u2","","Represents an unsigned two-byte quantity.",null,null],[6,"u4","","Represents an unsigned four-byte quantity.",null,null],[6,"constant_pool_index","","Represents an index into the constant pool.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"fieldinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"methodinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"classfile"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"parser","rust_jvm","Contains a parser for a Java class file.",null,null],[0,"nom_support","rust_jvm::parser","Workaround to get sane nested errors from `nom`. The nom library does not provide parsers that\ncan have controllable backtracking behavior, so we need to hack it in. Follows\n[#160](https://github.com/Geal/nom/issues/160).",null,null],[0,"class_file","","A parser for a Java class file.",null,null],[4,"Error","rust_jvm::parser::class_file","",null,null],[13,"ClassFile","","",31,null],[13,"Magic","","",31,null],[13,"ConstantPool","","",31,null],[12,"constant_pool_count","rust_jvm::parser::class_file::Error","",31,null],[13,"ConstantPoolEntry","rust_jvm::parser::class_file","",31,null],[12,"index","rust_jvm::parser::class_file::Error","",31,null],[13,"ConstantPoolInfo","rust_jvm::parser::class_file","",31,null],[13,"UnknownConstantPoolTag","","",31,null],[12,"tag","rust_jvm::parser::class_file::Error","",31,null],[13,"ConstantPoolIndexOutOfBounds","rust_jvm::parser::class_file","",31,null],[12,"index","rust_jvm::parser::class_file::Error","",31,null],[13,"UnexpectedConstantPoolType","rust_jvm::parser::class_file","",31,null],[12,"index","rust_jvm::parser::class_file::Error","",31,null],[12,"expected","","",31,null],[12,"actual","","",31,null],[13,"IllegalModifiedUtf8","rust_jvm::parser::class_file","",31,null],[12,"byte","rust_jvm::parser::class_file::Error","",31,null],[13,"ModifiedUtf8","rust_jvm::parser::class_file","",31,null],[12,"length","rust_jvm::parser::class_file::Error","",31,null],[13,"UnknownConstantPoolMethodReferenceTag","rust_jvm::parser::class_file","",31,null],[12,"tag","rust_jvm::parser::class_file::Error","",31,null],[13,"Interfaces","rust_jvm::parser::class_file","",31,null],[12,"interfaces_count","rust_jvm::parser::class_file::Error","",31,null],[13,"Fields","rust_jvm::parser::class_file","",31,null],[12,"fields_count","rust_jvm::parser::class_file::Error","",31,null],[13,"FieldInfo","rust_jvm::parser::class_file","",31,null],[13,"FieldAttributes","","",31,null],[12,"attributes_count","rust_jvm::parser::class_file::Error","",31,null],[13,"Methods","rust_jvm::parser::class_file","",31,null],[12,"methods_count","rust_jvm::parser::class_file::Error","",31,null],[13,"MethodInfo","rust_jvm::parser::class_file","",31,null],[13,"MethodAttributes","","",31,null],[12,"attributes_count","rust_jvm::parser::class_file::Error","",31,null],[13,"ClassAttributes","rust_jvm::parser::class_file","",31,null],[12,"attributes_count","rust_jvm::parser::class_file::Error","",31,null],[13,"Attribute","rust_jvm::parser::class_file","",31,null],[13,"AttributeInfo","","",31,null],[12,"attribute_name","rust_jvm::parser::class_file::Error","",31,null],[12,"attribute_name_index","","",31,null],[12,"attribute_length","","",31,null],[13,"AttributeInfoNameIndexOutOfBounds","rust_jvm::parser::class_file","",31,null],[12,"attribute_name_index","rust_jvm::parser::class_file::Error","",31,null],[13,"CodeAttributes","rust_jvm::parser::class_file","",31,null],[12,"attributes_count","rust_jvm::parser::class_file::Error","",31,null],[13,"ExceptionTableEntry","rust_jvm::parser::class_file","",31,null],[13,"StackMapTable","","",31,null],[12,"number_of_entries","rust_jvm::parser::class_file::Error","",31,null],[13,"StackMapFrame","rust_jvm::parser::class_file","",31,null],[13,"UnknownStackMapFrameTag","","",31,null],[12,"tag","rust_jvm::parser::class_file::Error","",31,null],[13,"ReservedStackMapFrameTag","rust_jvm::parser::class_file","",31,null],[12,"tag","rust_jvm::parser::class_file::Error","",31,null],[13,"VerificationTypeInfo","rust_jvm::parser::class_file","",31,null],[13,"UnknownVerificationTypeInfoTag","","",31,null],[12,"tag","rust_jvm::parser::class_file::Error","",31,null],[13,"InnerClasses","rust_jvm::parser::class_file","",31,null],[12,"number_of_classes","rust_jvm::parser::class_file::Error","",31,null],[13,"InnerClass","rust_jvm::parser::class_file","",31,null],[13,"Signature","","",31,null],[13,"MethodParameters","","",31,null],[12,"parameters_count","rust_jvm::parser::class_file::Error","",31,null],[13,"MethodParameter","rust_jvm::parser::class_file","",31,null],[13,"ElementValuePair","","",31,null],[13,"ElementValuePairs","","",31,null],[12,"num_element_value_pairs","rust_jvm::parser::class_file::Error","",31,null],[13,"ElementValue","rust_jvm::parser::class_file","",31,null],[13,"UnknownElementValueTag","","",31,null],[12,"tag","rust_jvm::parser::class_file::Error","",31,null],[13,"ElementValueArray","rust_jvm::parser::class_file","",31,null],[12,"num_values","rust_jvm::parser::class_file::Error","",31,null],[13,"Annotations","rust_jvm::parser::class_file","",31,null],[12,"num_annotations","rust_jvm::parser::class_file::Error","",31,null],[13,"ParameterAnnotations","rust_jvm::parser::class_file","",31,null],[12,"num_parameters","rust_jvm::parser::class_file::Error","",31,null],[13,"TypeAnnotations","rust_jvm::parser::class_file","",31,null],[12,"num_annotations","rust_jvm::parser::class_file::Error","",31,null],[13,"UnknownTargetTypeTag","rust_jvm::parser::class_file","",31,null],[12,"tag","rust_jvm::parser::class_file::Error","",31,null],[13,"LocalVariableTarget","rust_jvm::parser::class_file","",31,null],[12,"table_length","rust_jvm::parser::class_file::Error","",31,null],[13,"TypePath","rust_jvm::parser::class_file","",31,null],[12,"path_length","rust_jvm::parser::class_file::Error","",31,null],[13,"SourceFile","rust_jvm::parser::class_file","",31,null],[13,"SourceDebugExtension","","",31,null],[13,"LineNumberTable","","",31,null],[12,"table_length","rust_jvm::parser::class_file::Error","",31,null],[13,"LineNumberInfo","rust_jvm::parser::class_file","",31,null],[13,"LocalVariableTable","","",31,null],[12,"table_length","rust_jvm::parser::class_file::Error","",31,null],[13,"LocalVariableInfo","rust_jvm::parser::class_file","",31,null],[13,"LocalVariableTypeTable","","",31,null],[12,"table_length","rust_jvm::parser::class_file::Error","",31,null],[13,"LocalVariableTypeInfo","rust_jvm::parser::class_file","",31,null],[5,"magic","","",null,{"inputs":[{"name":"input"}],"output":{"name":"result"}}],[5,"cp_info_tag","","",null,{"inputs":[{"name":"input"}],"output":{"name":"result"}}],[5,"cp_index","","",null,{"inputs":[{"name":"input"}],"output":{"name":"result"}}],[5,"cp_index_tag","","Parses for a constant pool index and verifies that its the entry in the\nconstant pool matches the specified tag.",null,{"inputs":[{"name":"input"},{"name":"constantpool"},{"name":"tag"}],"output":{"name":"parseresult"}}],[5,"maybe_cp_index_tag","","Parses for a constant pool index that might be zero and verifies that its\nthe entry in the constant pool matches the specified tag.",null,{"inputs":[{"name":"input"},{"name":"constantpool"},{"name":"tag"}],"output":{"name":"parseresult"}}],[5,"modified_utf8","","",null,{"inputs":[{"name":"input"}],"output":{"name":"result"}}],[5,"reference_kind","","",null,{"inputs":[{"name":"input"}],"output":{"name":"result"}}],[5,"reference","","",null,{"inputs":[{"name":"input"},{"name":"tag"}],"output":{"name":"parseresult"}}],[5,"cp_info_info","","",null,{"inputs":[{"name":"input"},{"name":"tag"}],"output":{"name":"parseresult"}}],[5,"cp_info","","",null,{"inputs":[{"name":"input"}],"output":{"name":"result"}}],[5,"exception_table","","",null,{"inputs":[{"name":"input"},{"name":"constantpool"}],"output":{"name":"parseresult"}}],[5,"verification_type_info_tag","","",null,{"inputs":[{"name":"input"}],"output":{"name":"result"}}],[5,"verification_type_info","","",null,{"inputs":[{"name":"input"},{"name":"constantpool"}],"output":{"name":"parseresult"}}],[5,"stack_map_frame_info","","",null,{"inputs":[{"name":"input"},{"name":"tag"},{"name":"constantpool"}],"output":{"name":"parseresult"}}],[5,"stack_map_frame","","",null,{"inputs":[{"name":"input"},{"name":"constantpool"}],"output":{"name":"parseresult"}}],[5,"line_number_info","","",null,{"inputs":[{"name":"input"}],"output":{"name":"result"}}],[5,"local_variable_info","","",null,{"inputs":[{"name":"input"}],"output":{"name":"result"}}],[5,"local_variable_type_info","","",null,{"inputs":[{"name":"input"}],"output":{"name":"result"}}],[5,"attribute_info","","",null,{"inputs":[{"name":"input"},{"name":"constantpoolindex"},{"name":"u32"},{"name":"constantpool"}],"output":{"name":"parseresult"}}],[5,"inner_class","","",null,{"inputs":[{"name":"input"},{"name":"constantpool"}],"output":{"name":"parseresult"}}],[5,"method_parameter","","",null,{"inputs":[{"name":"input"},{"name":"constantpool"}],"output":{"name":"parseresult"}}],[5,"element_value_pair","","",null,{"inputs":[{"name":"input"},{"name":"constantpool"}],"output":{"name":"parseresult"}}],[5,"element_value_pairs","","",null,{"inputs":[{"name":"input"},{"name":"constantpool"}],"output":{"name":"parseresult"}}],[5,"element_value","","",null,{"inputs":[{"name":"input"},{"name":"constantpool"}],"output":{"name":"parseresult"}}],[5,"annotation","","",null,{"inputs":[{"name":"input"},{"name":"constantpool"}],"output":{"name":"parseresult"}}],[5,"annotations","","",null,{"inputs":[{"name":"input"},{"name":"constantpool"}],"output":{"name":"parseresult"}}],[5,"parameter_annotations","","",null,{"inputs":[{"name":"input"},{"name":"constantpool"}],"output":{"name":"parseresult"}}],[5,"target_info","","",null,{"inputs":[{"name":"input"}],"output":{"name":"parseresult"}}],[5,"type_path","","",null,{"inputs":[{"name":"input"}],"output":{"name":"result"}}],[5,"type_annotation","","",null,{"inputs":[{"name":"input"},{"name":"constantpool"}],"output":{"name":"parseresult"}}],[5,"type_annotations","","",null,{"inputs":[{"name":"input"},{"name":"constantpool"}],"output":{"name":"parseresult"}}],[5,"attribute_info_switch","","",null,null],[5,"attribute","","",null,{"inputs":[{"name":"input"},{"name":"constantpool"}],"output":{"name":"parseresult"}}],[5,"field","","",null,{"inputs":[{"name":"input"},{"name":"constantpool"}],"output":{"name":"parseresult"}}],[5,"method","","",null,{"inputs":[{"name":"input"},{"name":"constantpool"}],"output":{"name":"parseresult"}}],[5,"class_file_parser","","",null,{"inputs":[{"name":"input"}],"output":{"name":"result"}}],[5,"parse_class_file","","Parses a Java class file.",null,{"inputs":[{"name":"input"}],"output":{"name":"iresult"}}],[6,"Input","","The input type to the parser.",null,null],[6,"ParseResult","","The return type of a backtracking-controllable parser method.",null,null],[6,"ConstantPoolIndex","","The type of an index into the class file constant pool.",null,null],[11,"fmt","","",31,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"util","rust_jvm","",null,null],[0,"modified_utf8","rust_jvm::util","Modified UTF-8 string slices.",null,null],[3,"ModifiedUtf8Error","rust_jvm::util::modified_utf8","Errors which can occur when attempting to interpret a sequence of `u8` as a modified UTF-8\nstring.",null,null],[12,"valid_up_to","","",32,null],[5,"from_modified_utf8","","Converts a slice of bytes in modified UTF-8 encoding to a string slice.",null,null],[11,"fmt","","",32,{"inputs":[{"name":"modifiedutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"one_indexed_vec","rust_jvm::util","A `std::vec::Vec`, but 1-indexed instead of 0-indexed.",null,null],[3,"OneIndexedVec","rust_jvm::util::one_indexed_vec","Like a `std::vec::Vec`, but 1-indexed instead of 0-indexed.",null,null],[12,"vec","","",33,null],[11,"fmt","","",33,{"inputs":[{"name":"oneindexedvec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Returns the element of a slice at the given index, or None if the index is out of bounds.",33,{"inputs":[{"name":"oneindexedvec"},{"name":"usize"}],"output":{"name":"option"}}],[11,"len","","Returns the number of elements in the slice.",33,{"inputs":[{"name":"oneindexedvec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the slice has a length of 0.",33,{"inputs":[{"name":"oneindexedvec"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the slice.",33,{"inputs":[{"name":"oneindexedvec"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator that allows modifying each value.",33,{"inputs":[{"name":"oneindexedvec"}],"output":{"name":"itermut"}}],[11,"index","","",33,{"inputs":[{"name":"oneindexedvec"},{"name":"usize"}],"output":{"name":"output"}}],[11,"index_mut","","",33,{"inputs":[{"name":"oneindexedvec"},{"name":"usize"}],"output":{"name":"output"}}],[11,"from","","",33,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into_iter","","",33,{"inputs":[{"name":"oneindexedvec"}],"output":{"name":"intoiter"}}],[0,"vm","rust_jvm","The public interface for the Java virtual machine.",null,null],[3,"VirtualMachine","rust_jvm::vm","The top-level virtual machine. The virtual machine contains a reference to its _bootstrap class\nloader_, which is used to load the main class and all of that class&#39;s dependencies.",null,null],[12,"bootstrap_class_loader","","The bootstrap class loader used to initialize the virtual machine.",34,null],[0,"bytecode","","The Java bytecode.",null,null],[0,"opcode","rust_jvm::vm::bytecode","Opcodes for Java bytecode instructions.",null,null],[17,"NOP","rust_jvm::vm::bytecode::opcode","",null,null],[17,"ACONST_NULL","","",null,null],[17,"ICONST_M1","","",null,null],[17,"ICONST_0","","",null,null],[17,"ICONST_1","","",null,null],[17,"ICONST_2","","",null,null],[17,"ICONST_3","","",null,null],[17,"ICONST_4","","",null,null],[17,"ICONST_5","","",null,null],[17,"LCONST_0","","",null,null],[17,"LCONST_1","","",null,null],[17,"FCONST_0","","",null,null],[17,"FCONST_1","","",null,null],[17,"FCONST_2","","",null,null],[17,"DCONST_0","","",null,null],[17,"DCONST_1","","",null,null],[17,"BIPUSH","","",null,null],[17,"SIPUSH","","",null,null],[17,"LDC","","",null,null],[17,"LDC_W","","",null,null],[17,"LDC2_W","","",null,null],[17,"ILOAD","","",null,null],[17,"LLOAD","","",null,null],[17,"FLOAD","","",null,null],[17,"DLOAD","","",null,null],[17,"ALOAD","","",null,null],[17,"ILOAD_0","","",null,null],[17,"ILOAD_1","","",null,null],[17,"ILOAD_2","","",null,null],[17,"ILOAD_3","","",null,null],[17,"LLOAD_0","","",null,null],[17,"LLOAD_1","","",null,null],[17,"LLOAD_2","","",null,null],[17,"LLOAD_3","","",null,null],[17,"FLOAD_0","","",null,null],[17,"FLOAD_1","","",null,null],[17,"FLOAD_2","","",null,null],[17,"FLOAD_3","","",null,null],[17,"DLOAD_0","","",null,null],[17,"DLOAD_1","","",null,null],[17,"DLOAD_2","","",null,null],[17,"DLOAD_3","","",null,null],[17,"ALOAD_0","","",null,null],[17,"ALOAD_1","","",null,null],[17,"ALOAD_2","","",null,null],[17,"ALOAD_3","","",null,null],[17,"IALOAD","","",null,null],[17,"LALOAD","","",null,null],[17,"FALOAD","","",null,null],[17,"DALOAD","","",null,null],[17,"AALOAD","","",null,null],[17,"BALOAD","","",null,null],[17,"CALOAD","","",null,null],[17,"SALOAD","","",null,null],[17,"ISTORE","","",null,null],[17,"LSTORE","","",null,null],[17,"FSTORE","","",null,null],[17,"DSTORE","","",null,null],[17,"ASTORE","","",null,null],[17,"ISTORE_0","","",null,null],[17,"ISTORE_1","","",null,null],[17,"ISTORE_2","","",null,null],[17,"ISTORE_3","","",null,null],[17,"LSTORE_0","","",null,null],[17,"LSTORE_1","","",null,null],[17,"LSTORE_2","","",null,null],[17,"LSTORE_3","","",null,null],[17,"FSTORE_0","","",null,null],[17,"FSTORE_1","","",null,null],[17,"FSTORE_2","","",null,null],[17,"FSTORE_3","","",null,null],[17,"DSTORE_0","","",null,null],[17,"DSTORE_1","","",null,null],[17,"DSTORE_2","","",null,null],[17,"DSTORE_3","","",null,null],[17,"ASTORE_0","","",null,null],[17,"ASTORE_1","","",null,null],[17,"ASTORE_2","","",null,null],[17,"ASTORE_3","","",null,null],[17,"IASTORE","","",null,null],[17,"LASTORE","","",null,null],[17,"FASTORE","","",null,null],[17,"DASTORE","","",null,null],[17,"AASTORE","","",null,null],[17,"BASTORE","","",null,null],[17,"CASTORE","","",null,null],[17,"SASTORE","","",null,null],[17,"POP","","",null,null],[17,"POP2","","",null,null],[17,"DUP","","",null,null],[17,"DUP_X1","","",null,null],[17,"DUP_X2","","",null,null],[17,"DUP2","","",null,null],[17,"DUP2_X1","","",null,null],[17,"DUP2_X2","","",null,null],[17,"SWAP","","",null,null],[17,"IADD","","",null,null],[17,"LADD","","",null,null],[17,"FADD","","",null,null],[17,"DADD","","",null,null],[17,"ISUB","","",null,null],[17,"LSUB","","",null,null],[17,"FSUB","","",null,null],[17,"DSUB","","",null,null],[17,"IMUL","","",null,null],[17,"LMUL","","",null,null],[17,"FMUL","","",null,null],[17,"DMUL","","",null,null],[17,"IDIV","","",null,null],[17,"LDIV","","",null,null],[17,"FDIV","","",null,null],[17,"DDIV","","",null,null],[17,"IREM","","",null,null],[17,"LREM","","",null,null],[17,"FREM","","",null,null],[17,"DREM","","",null,null],[17,"INEG","","",null,null],[17,"LNEG","","",null,null],[17,"FNEG","","",null,null],[17,"DNEG","","",null,null],[17,"ISHL","","",null,null],[17,"LSHL","","",null,null],[17,"ISHR","","",null,null],[17,"LSHR","","",null,null],[17,"IUSHR","","",null,null],[17,"LUSHR","","",null,null],[17,"IAND","","",null,null],[17,"LAND","","",null,null],[17,"IOR","","",null,null],[17,"LOR","","",null,null],[17,"IXOR","","",null,null],[17,"LXOR","","",null,null],[17,"IINC","","",null,null],[17,"I2L","","",null,null],[17,"I2F","","",null,null],[17,"I2D","","",null,null],[17,"L2I","","",null,null],[17,"L2F","","",null,null],[17,"L2D","","",null,null],[17,"F2I","","",null,null],[17,"F2L","","",null,null],[17,"F2D","","",null,null],[17,"D2I","","",null,null],[17,"D2L","","",null,null],[17,"D2F","","",null,null],[17,"I2B","","",null,null],[17,"I2C","","",null,null],[17,"I2S","","",null,null],[17,"LCMP","","",null,null],[17,"FCMPL","","",null,null],[17,"FCMPG","","",null,null],[17,"DCMPL","","",null,null],[17,"DCMPG","","",null,null],[17,"IFEQ","","",null,null],[17,"IFNE","","",null,null],[17,"IFLT","","",null,null],[17,"IFGE","","",null,null],[17,"IFGT","","",null,null],[17,"IFLE","","",null,null],[17,"IF_ICMPEQ","","",null,null],[17,"IF_ICMPNE","","",null,null],[17,"IF_ICMPLT","","",null,null],[17,"IF_ICMPGE","","",null,null],[17,"IF_ICMPGT","","",null,null],[17,"IF_ICMPLE","","",null,null],[17,"IF_ACMPEQ","","",null,null],[17,"IF_ACMPNE","","",null,null],[17,"GOTO","","",null,null],[17,"JSR","","",null,null],[17,"RET","","",null,null],[17,"TABLESWITCH","","",null,null],[17,"LOOKUPSWITCH","","",null,null],[17,"IRETURN","","",null,null],[17,"LRETURN","","",null,null],[17,"FRETURN","","",null,null],[17,"DRETURN","","",null,null],[17,"ARETURN","","",null,null],[17,"RETURN","","",null,null],[17,"GETSTATIC","","",null,null],[17,"PUTSTATIC","","",null,null],[17,"GETFIELD","","",null,null],[17,"PUTFIELD","","",null,null],[17,"INVOKEVIRTUAL","","",null,null],[17,"INVOKESPECIAL","","",null,null],[17,"INVOKESTATIC","","",null,null],[17,"INVOKEINTERFACE","","",null,null],[17,"INVOKEDYNAMIC","","",null,null],[17,"NEW","","",null,null],[17,"NEWARRAY","","",null,null],[17,"ANEWARRAY","","",null,null],[17,"ARRAYLENGTH","","",null,null],[17,"ATHROW","","",null,null],[17,"CHECKCAST","","",null,null],[17,"INSTANCEOF","","",null,null],[17,"MONITORENTER","","",null,null],[17,"MONITOREXIT","","",null,null],[17,"WIDE","","",null,null],[17,"MULTIANEWARRAY","","",null,null],[17,"IFNULL","","",null,null],[17,"IFNONNULL","","",null,null],[17,"GOTO_W","","",null,null],[17,"JSR_W","","",null,null],[17,"BREAKPOINT","","",null,null],[17,"IMPDEP1","","",null,null],[17,"IMPDEP2","","",null,null],[0,"class","rust_jvm::vm","Internal JVM representations of classes and methods.",null,null],[3,"Class","rust_jvm::vm::class","A JVM representation of a class that has been loaded.",null,null],[12,"symref","","A symbolic reference to the class, comprised of its name (if a scalar type) or element type\n(if an array class).",35,null],[12,"access_flags","","The access flags for the class.",35,null],[12,"superclass","","The superclass extended by the class. If the class is `java/lang/Object`, this is `None`.",35,null],[12,"constant_pool","","The runtime constant pool of the current class, created from the constant pool defined in\nthe `.class` file that has been loaded.",35,null],[12,"fields","","The fields of this class mapped to their access flags. This map includes both `static` and\nnon-`static` fields. We don&#39;t separate them because it makes it easier to throw the correct\nruntime `Error` when certain invalid conditions are detected.",35,null],[12,"field_constants","","The constants which populate the `static final` fields of this class. We don&#39;t immediately\nput these values into `class_fields` because they can include `String` literals, and we may\nnot have loaded the `String` class yet. (This is also consistent with the spec, which\nstates that these constants are set at class initialization time.)",35,null],[12,"methods","","The methods of the class, mapped to their method structures.",35,null],[12,"field_values","","The values of the static fields of this class. These are only set at class initialization.\n§5.5 of the JVM spec requires that initialization occur only at certain specific points,\nin particular:\n* When an instance of the class is created with the `new` instruction\n* When one of the `getstatic`, `putstatic`, or `invokestatic` instructions refers to one\n  of the static members of the class\n* When a subclass of the class is initialized\n* When the VM is about to begin executing the `main` method in the class containing the\n  overall program entry point\nPrior to initialization, this structure field contains `None`. After initialization, this\nfield contains a `Some` with a `HashMap` value, which must contain the current values for\neach `static` field of this class.",35,null],[3,"Method","","A JVM representation of a method in a loaded class.",null,null],[12,"symref","","The method&#39;s signature, comprised of its name and argument and return types.",36,null],[12,"access_flags","","The method&#39;s access flags.",36,null],[12,"code","","A `MethodCode` variant, which is used to actually invoke the method.",36,null],[4,"MethodCode","","A representation of the code associated with a method, or more generally, the action that\nshould be taken when a method is invoked.",null,null],[13,"Concrete","","The code for a non-`abstract`, non-`native` Java method. Such contains executable bytecode\nwhich may be used to create a new JVM stack frame.",37,null],[12,"max_locals","rust_jvm::vm::class::MethodCode","",37,null],[12,"code","","",37,null],[12,"exception_table","","",37,null],[13,"Abstract","rust_jvm::vm::class","to invoke an `abstract` method fails with `AbstractMethodError`.",37,null],[13,"Native","","The code for a `native` Java method for which the class loader has located a corresponding\nRust function pointer.",37,null],[13,"NativeNotFound","","The code for a `native` Java method for which the class loader failed to locate a Rust\nfunction pointer.",37,null],[11,"fmt","","",35,{"inputs":[{"name":"class"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",35,{"inputs":[{"name":"class"},{"name":"option"},{"name":"runtimeconstantpool"},{"name":"classfile"}],"output":{"name":"self"}}],[11,"new_array","","Create a new array class for a given element type.",35,{"inputs":[{"name":"rc"},{"name":"u16"},{"name":"type"}],"output":{"name":"self"}}],[11,"get_symref","","",35,{"inputs":[{"name":"class"}],"output":{"name":"class"}}],[11,"get_access_flags","","",35,{"inputs":[{"name":"class"}],"output":{"name":"u16"}}],[11,"get_constant_pool","","",35,{"inputs":[{"name":"class"}],"output":{"name":"runtimeconstantpool"}}],[11,"resolve_method","","Find the method in the current class referred to by a given symbolic reference. If the\nmethod is not found, panics with a `NoSuchMethodError`.",35,{"inputs":[{"name":"class"},{"name":"method"}],"output":{"name":"method"}}],[11,"find_method","","Implements dynamic lookup of a method&#39;s signature in the current class. If no method with\nthe given signature is found, then recursively searches the current class&#39;s superclasses.",35,{"inputs":[{"name":"class"},{"name":"method"}],"output":{"name":"option"}}],[11,"dispatch_method","","Implements dynamic dispatch of a resolved method according to the lookup procedure\nspecified for the `invokevirtual` instruction. Method resolution depends on whether the\nmethod in question overrides a superclass method. (See spec for more information.)",35,{"inputs":[{"name":"class"},{"name":"method"}],"output":{"name":"option"}}],[11,"is_descendant","","Returns true if this class is a descendant (direct or indirect subclass) of another class.",35,{"inputs":[{"name":"class"},{"name":"class"}],"output":{"name":"bool"}}],[11,"initialize","","Initialize the class by executing its class or interface initialization method.  Prior to\ninitialization, a class or interface must be linked, that is, verified, prepared, and\noptionally resolved.",35,{"inputs":[{"name":"class"},{"name":"classloader"}],"output":null}],[11,"resolve_and_get_field","","Resolves a symbolic reference to a field and reads a value from that field.",35,{"inputs":[{"name":"class"},{"name":"field"},{"name":"classloader"}],"output":{"name":"value"}}],[11,"resolve_and_put_field","","Resolves a symbolic reference to a field and writes a new value to that field.",35,{"inputs":[{"name":"class"},{"name":"field"},{"name":"value"},{"name":"classloader"}],"output":null}],[11,"collect_instance_fields","","Returns a set of the signatures of the fields of an instance of this class.",35,{"inputs":[{"name":"class"}],"output":{"name":"hashset"}}],[11,"fmt","","",36,{"inputs":[{"name":"method"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",36,{"inputs":[{"name":"method"},{"name":"methodinfo"}],"output":{"name":"self"}}],[11,"invoke","","",36,{"inputs":[{"name":"method"},{"name":"class"},{"name":"classloader"},{"name":"vec"}],"output":{"name":"option"}}],[11,"fmt","","",37,{"inputs":[{"name":"methodcode"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"class_loader","rust_jvm::vm","",null,null],[3,"ClassLoader","rust_jvm::vm::class_loader","A class loader suitable for loading classes into the JVM.",null,null],[12,"classes","","The classes that have already been resolved by this class loader.",38,null],[12,"pending","","The signatures of classes that have not yet been resolved by this class loader.",38,null],[4,"Error","","",null,null],[13,"ClassNotFound","","If no &quot;purported representation&quot; of the class is found. §5.3.1.",39,null],[12,"name","rust_jvm::vm::class_loader::Error","",39,null],[12,"error","","",39,null],[13,"ClassFormat","rust_jvm::vm::class_loader","The &quot;purported representation&quot; does not follow the class file format. §5.3.5.",39,null],[13,"UnsupportedVersion","","The &quot;purported representation&quot; is not of a supported version. §5.3.5.",39,null],[12,"major","rust_jvm::vm::class_loader::Error","",39,null],[12,"minor","","",39,null],[13,"NoClassDefFound","rust_jvm::vm::class_loader","The &quot;purported representation&quot; does not actually represent the requested class. §5.3.5.",39,null],[12,"name","rust_jvm::vm::class_loader::Error","",39,null],[13,"NoClassDefFoundCause","rust_jvm::vm::class_loader","(A subtlety here is that recursive class loading to load superclasses is performed as part\nof resolution (§5.3.5, step 3). Therefore, a ClassNotFoundException that results from a\nclass loader failing to load a superclass must be wrapped in a NoClassDefFoundError.) §5.3",39,null],[12,"name","rust_jvm::vm::class_loader::Error","",39,null],[12,"not_found","","",39,null],[13,"IncompatibleClassChange","rust_jvm::vm::class_loader","",39,null],[13,"ClassCircularity","","The class is its own superclass or superinterface. §5.3.5.",39,null],[11,"fmt","","",39,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",39,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",39,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"fmt","","",38,{"inputs":[{"name":"classloader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",38,{"inputs":[],"output":{"name":"classloader"}}],[11,"find_class_bytes","","Given a class name, read the bytes from the corresponding class file.",38,{"inputs":[{"name":"classloader"},{"name":"str"}],"output":{"name":"result"}}],[11,"get_class_ref","","Get the symbolic reference to a class from a runtime constant pool index.",38,{"inputs":[{"name":"runtimeconstantpool"},{"name":"u16"}],"output":{"name":"result"}}],[11,"resolve_class","","Load a class based on a symbolic reference.",38,{"inputs":[{"name":"classloader"},{"name":"class"}],"output":{"name":"result"}}],[11,"derive_super_class","","Derives the super class (if it exists) of the specified class.",38,{"inputs":[{"name":"classloader"},{"name":"runtimeconstantpool"},{"name":"classfile"}],"output":{"name":"result"}}],[11,"derive_class","","Derives the specified class and its interfaces, but not its superclass.",38,null],[11,"load_class_bytes","","Attempts to create, load, and prepare the specified class from the specified bytes. The\nbootstrap class loader searches the current directory for a class file with the correct\nfully-qualified name. If none is found, the bootstrap class loader then attempts to load\nthe class from the standard library JAR.",38,null],[11,"load_class","","Attempts to create, load, and prepare the specified class using the bootstrap class loader\nimplementation. The bootstrap class loader searches the current directory for a class file\nwith the correct fully-qualified name. If none is found, the bootstrap class loader then\nattempts to load the class from the standard library JAR.",38,{"inputs":[{"name":"classloader"},{"name":"class"}],"output":{"name":"result"}}],[0,"constant_pool","rust_jvm::vm","The runtime constant pool.",null,null],[3,"RuntimeConstantPool","rust_jvm::vm::constant_pool","A runtime constant pool. This just consists of a `OneIndexedVec` of constant pool entries.",null,null],[12,"entries","","",40,null],[3,"ModifiedUtf8String","","Represents a modified UTF-8 string (§4.4.7). This structure is created directly from the bytes\nin the class file, and has not undergone any kind of validation.",null,null],[12,"bytes","","",41,null],[4,"RuntimeConstantPoolEntry","","An constant value in the runtime constant pool.",null,null],[13,"ClassRef","","A symbolic reference to a class.",42,null],[13,"MethodRef","","A symbolic reference to a method.",42,null],[13,"FieldRef","","A symbolic reference to an object field.",42,null],[13,"ResolvedLiteral","","A literal value that has undergone resolution.",42,null],[13,"UnresolvedString","","An unresolved reference to a modified UTF-8 string in the constant pool.",42,null],[13,"StringValue","","A resolved modified UTF-8 string value.",42,null],[11,"fmt","","",42,{"inputs":[{"name":"runtimeconstantpoolentry"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"runtimeconstantpool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",40,{"inputs":[{"name":"runtimeconstantpool"},{"name":"constant_pool_index"}],"output":{"name":"output"}}],[11,"new","","Creates a new runtime constant pool from the `ConstantPool` returned by the class file\nparser. Most of this process involves constructing `sig` and `symref` structures\nrepresenting the symbolic references in the constant pool.",40,{"inputs":[{"name":"constantpool"}],"output":{"name":"self"}}],[11,"force_class_ref","","Constructs a `symref::Class` from a `ConstantPoolInfo::Class`, panicking if `info` is of a\ndifferent variant of `ConstantPoolInfo`.",40,{"inputs":[{"name":"constantpool"},{"name":"constantpoolinfo"}],"output":{"name":"class"}}],[11,"force_name_and_type","","Constructs a tuple of name and descriptor (type) strings from a\n`ConstantPoolInfo::NameAndType`, panicking if `info` is of a different variant of\n`ConstantPoolInfo`. The names of classes are binary names (§4.2.1) while the names of\nfields and methods are unqualified names (§4.2.2). Descriptor formats vary depending on the\ntype of descriptor being referenced (§4.3).",40,null],[11,"force_string","","Constructs a `ModifiedUtf8String` from a `ConstantPoolInfo::Utf8`, panicking in `info` is\nof a different variant of `ConstantPoolInfo`.",40,{"inputs":[{"name":"constantpoolinfo"}],"output":{"name":"modifiedutf8string"}}],[11,"lookup_raw_string","","Returns the `String` at the runtime constant pool entry at `index`, panicking if that entry\nis not a `RuntimeConstantPoolEntry::StringValue`. This is used during class creation,\nbecause the structures describing fields and methods later in the class file (after the\nconstant pool) use constant pool indices to refer to their names.",40,{"inputs":[{"name":"runtimeconstantpool"},{"name":"constant_pool_index"}],"output":{"name":"string"}}],[11,"resolve_literal","","Resolves a literal value in the constant pool into a `Value`. For `String` literals, this\nrequires instantiating an instance of the `String` class, which we do by calling the\n`String(char[])` constructor using the content of the modified UTF-8 string in the constant\npool, parsed into UTF-16.",40,{"inputs":[{"name":"runtimeconstantpool"},{"name":"constant_pool_index"},{"name":"classloader"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"modifiedutf8string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",41,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"to_string","","Converts a modified UTF-8 string to a Rust `String`.",41,{"inputs":[{"name":"modifiedutf8string"}],"output":{"name":"string"}}],[11,"to_utf16","","Converts a modified UTF-8 string to a UTF-16 string. This function is provided as an\noptimization in creating Java `String` literals, which are in UTF-16 format. It does not\nvalidate surrogate pairs.",41,{"inputs":[{"name":"modifiedutf8string"}],"output":{"name":"vec"}}],[0,"frame","rust_jvm::vm","The runtime state of a method that is currently executing in the virtual machine.",null,null],[3,"Frame","rust_jvm::vm::frame","A frame is used to store data and partial results, as well as to perform dynamic linking,\nreturn values for methods, and dispatch exceptions.",null,null],[12,"current_class","","A reference to the class containing the currently executing method.",43,null],[12,"code","","The bytecode currently executing in this frame.",43,null],[12,"pc","","The current program counter.",43,null],[12,"local_variables","","The local variables of the current method.\nValues that occupy two indices (`long` and `double`) are stored in one slot followed by a\n`None` value in the subsequent index.",43,null],[12,"operand_stack","","The operand stack manipulated by the instructions of the current method.",43,null],[11,"fmt","","",43,{"inputs":[{"name":"frame"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",43,null],[11,"read_next_byte","","Read a byte (`u8`) value and advance the program counter.",43,{"inputs":[{"name":"frame"}],"output":{"name":"u8"}}],[11,"read_next_short","","Read a short (`u16`) value and advance the program counter by 2.",43,{"inputs":[{"name":"frame"}],"output":{"name":"u16"}}],[11,"pop_multi","","Remove `count` items from the operand stack.",43,{"inputs":[{"name":"frame"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"run","","Execute the method associated with this stack frame in the context of the currrent class\nloader, and return a result if there is one. This method may create new stack frames as a\nresult of evaluating `invoke*` instructions.",43,{"inputs":[{"name":"frame"},{"name":"classloader"}],"output":{"name":"option"}}],[0,"native","rust_jvm::vm","",null,null],[3,"NativeMethod","rust_jvm::vm::native","",null,null],[12,"0","","",44,null],[5,"bind","","",null,{"inputs":[{"name":"method"}],"output":{"name":"option"}}],[17,"ARRAYCOPY","","",null,null],[17,"WRITE","","",null,null],[11,"fmt","","",44,{"inputs":[{"name":"nativemethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"invoke","","",44,{"inputs":[{"name":"nativemethod"},{"name":"vec"}],"output":{"name":"option"}}],[0,"value","rust_jvm::vm","Internal JVM representations of Java values.",null,null],[3,"Scalar","rust_jvm::vm::value","An instance of a non-array object.",null,null],[12,"class","","A reference to the object&#39;s creating class.",45,null],[12,"fields","","The instance (non-`static`) fields of the object.",45,null],[3,"Array","","An instance of an array object.",null,null],[12,"class","","A reference to the (synthetic) array class.",46,null],[12,"array","","The array data.",46,null],[4,"Value","","A value in the Java virtual machine.",null,null],[13,"Int","","A 32-bit signed integral type, representing the Java types `byte`, `char`, `short`, `int`,\nand `boolean`.",47,null],[13,"Float","","A 32-bit floating-point type, representing the Java type `float`.",47,null],[13,"Long","","A 64-bit signed integral type, representing the Java type `long`.",47,null],[13,"Double","","A 64-bit floating-point type, representing the Java type `double`.",47,null],[13,"ScalarReference","","A reference to a scalar Java object in the heap.",47,null],[13,"ArrayReference","","A reference to a Java array in the heap.",47,null],[13,"NullReference","","A reference to a Java object which is `null`.",47,null],[11,"clone","","",47,{"inputs":[{"name":"value"}],"output":{"name":"value"}}],[11,"fmt","","",47,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"scalar"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",45,{"inputs":[{"name":"rc"}],"output":{"name":"self"}}],[11,"get_class","","",45,{"inputs":[{"name":"scalar"}],"output":{"name":"rc"}}],[11,"get_field","","",45,{"inputs":[{"name":"scalar"},{"name":"field"}],"output":{"name":"value"}}],[11,"put_field","","",45,{"inputs":[{"name":"scalar"},{"name":"field"},{"name":"value"}],"output":null}],[11,"fmt","","",46,{"inputs":[{"name":"array"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",46,{"inputs":[{"name":"rc"},{"name":"i32"}],"output":{"name":"self"}}],[11,"get_class","","",46,{"inputs":[{"name":"array"}],"output":{"name":"rc"}}],[11,"get","","",46,{"inputs":[{"name":"array"},{"name":"i32"}],"output":{"name":"value"}}],[11,"put","","",46,{"inputs":[{"name":"array"},{"name":"i32"},{"name":"value"}],"output":null}],[11,"len","","",46,{"inputs":[{"name":"array"}],"output":{"name":"i32"}}],[0,"symref","rust_jvm::vm","A symbolic reference to an entity in the runtime constant pool (§5.1). Symbolic references\nmust be resolved (§5.4.3) before their usage by the interpreter.",null,null],[3,"Class","rust_jvm::vm::symref","A symbolic reference to a class constant pool entry.",null,null],[12,"sig","","The signature of the class to which the symbolic reference refers.",48,null],[3,"Field","","A symbolic reference to a field constant pool entry.",null,null],[12,"class","","A symbolic reference to the class containing this field.",49,null],[12,"sig","","The signature of the field to which the symbolic reference refers.",49,null],[3,"Method","","A symbolic reference to a method constant pool entry.",null,null],[12,"class","","A symbolic reference to the class containing this method.",50,null],[12,"sig","","The signature of the method to which the symbolic reference refers.",50,null],[11,"hash","","",48,null],[11,"assert_receiver_is_total_eq","","",48,null],[11,"eq","","",48,{"inputs":[{"name":"class"},{"name":"class"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"class"},{"name":"class"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"class"}],"output":{"name":"class"}}],[11,"fmt","","",48,{"inputs":[{"name":"class"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",49,null],[11,"assert_receiver_is_total_eq","","",49,null],[11,"eq","","",49,{"inputs":[{"name":"field"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"field"},{"name":"field"}],"output":{"name":"bool"}}],[11,"clone","","",49,{"inputs":[{"name":"field"}],"output":{"name":"field"}}],[11,"fmt","","",49,{"inputs":[{"name":"field"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",50,null],[11,"assert_receiver_is_total_eq","","",50,null],[11,"eq","","",50,{"inputs":[{"name":"method"},{"name":"method"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"method"},{"name":"method"}],"output":{"name":"bool"}}],[11,"clone","","",50,{"inputs":[{"name":"method"}],"output":{"name":"method"}}],[11,"fmt","","",50,{"inputs":[{"name":"method"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"sig","rust_jvm::vm","Signatures of runtime constant pool entities that serve to uniquely identify those entities.\nThese are derived from structures in the binary representation of the constant pool (§5.1).",null,null],[3,"Field","rust_jvm::vm::sig","A field signature.",null,null],[12,"name","","The name of the field.",51,null],[12,"ty","","The type of the field.",51,null],[3,"Method","","A method signature.",null,null],[12,"name","","The name of the method.",52,null],[12,"params","","The types of the parameters of the method.",52,null],[12,"return_ty","","The return type of the method, or `None` if the method is `void`.",52,null],[4,"Type","","Java language type information.",null,null],[13,"Byte","","",53,null],[13,"Char","","",53,null],[13,"Double","","",53,null],[13,"Float","","",53,null],[13,"Int","","",53,null],[13,"Long","","",53,null],[13,"Short","","",53,null],[13,"Boolean","","",53,null],[13,"Reference","","",53,null],[4,"Class","","A class signature.",null,null],[13,"Scalar","","The signature of a non-array class, parametrized by its name.",54,null],[13,"Array","","The signature of an array class, parametrized by the type of elements in the array.",54,null],[11,"hash","","",53,null],[11,"assert_receiver_is_total_eq","","",53,null],[11,"eq","","",53,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"clone","","",53,{"inputs":[{"name":"type"}],"output":{"name":"type"}}],[11,"fmt","","",53,{"inputs":[{"name":"type"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",53,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"new_multi","","Compute a sequence of types from a JVM-internal string representation.",53,null],[11,"new_partial","","Compute a type from a JVM-internal string representation.",53,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"default_value","","Get the default value for the type. Java&#39;s default values for integers is `0`, floats\n`0.0`, characters `&#39;\\0&#39;`, booleans `false`, and references `null`.",53,{"inputs":[{"name":"type"}],"output":{"name":"value"}}],[11,"hash","","",54,null],[11,"assert_receiver_is_total_eq","","",54,null],[11,"eq","","",54,{"inputs":[{"name":"class"},{"name":"class"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"class"},{"name":"class"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"class"}],"output":{"name":"class"}}],[11,"fmt","","",54,{"inputs":[{"name":"class"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",54,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"get_package","","",54,{"inputs":[{"name":"class"}],"output":{"name":"option"}}],[11,"hash","","",51,null],[11,"assert_receiver_is_total_eq","","",51,null],[11,"eq","","",51,{"inputs":[{"name":"field"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"field"},{"name":"field"}],"output":{"name":"bool"}}],[11,"clone","","",51,{"inputs":[{"name":"field"}],"output":{"name":"field"}}],[11,"fmt","","",51,{"inputs":[{"name":"field"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",52,null],[11,"assert_receiver_is_total_eq","","",52,null],[11,"eq","","",52,{"inputs":[{"name":"method"},{"name":"method"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"method"},{"name":"method"}],"output":{"name":"bool"}}],[11,"clone","","",52,{"inputs":[{"name":"method"}],"output":{"name":"method"}}],[11,"fmt","","",52,{"inputs":[{"name":"method"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",52,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"fmt","rust_jvm::vm","",34,{"inputs":[{"name":"virtualmachine"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",34,{"inputs":[],"output":{"name":"self"}}],[11,"start","","Begin execution of the virtual machine instance&#39;s `main(String[])` method.",34,{"inputs":[{"name":"virtualmachine"},{"name":"class"}],"output":null}],[14,"eprintln!","rust_jvm","Prints to standard error.",null,null],[14,"with_warn!","","",null,null],[14,"catching!","","",null,null],[14,"catching_at!","","",null,null],[14,"done!","","`done!(O) =&gt; nom::IResult::Done&lt;I, O&gt;` wraps the specified expression in `nom::IResult::Done`.",null,null],[14,"custom_error!","","Convenience for creating a custom nom error `nom::Err::Code(nom::ErrorKind::Custom($err))`.",null,null],[14,"p_add_error!","","Adds a custom error if the child nom parser fails.",null,null],[14,"n!","","Declares a parser (with a body of type `nom::IResult`) that can be controlled for backtracking\nby using `c!` and `cut!`. The return type is `std::result::Result&lt;nom::IResult, nom::Err&lt;I,\nE&gt;&gt;`. If the parser returns `std::result::Result::Ok`, then backtracking occurs. If the parser\nreturns `std::result::Result::Err`, then backtracking does not occur.",null,null],[14,"p_named!","","Declares a parser (with a body of type `std::result::Result&lt;nom::IResult, nom::Err&lt;I, E&gt;&gt;`)\nthat can be controlled for backtracking by using `c!` and `cut!`. The return type is\n`std::result::Result&lt;nom::IResult, nom::Err&lt;I, E&gt;&gt;`. If the parser returns\n`std::result::Result::Ok`, then backtracking occurs. If the parser returns\n`std::result::Result::Err`, then backtracking does not occur.",null,null],[14,"cut!","","`cut!(nom::ErrorKind&lt;E&gt;, I -&gt; nom::IResult&lt;I, O, E&gt;) =&gt; Err&lt;_, nom::Err&lt;I, E&gt;&gt; OR nom::IResult::Done&lt;I, O, E&gt; OR IResult::Incomplete&lt;_&gt;`\nPrevents backtracking out of the specified nom parser.",null,null],[14,"c!","","Converts a backtracking-controllable parser to a nom parser that will have the correct\nbacktracking behavior.",null,null],[14,"p_cut!","","`p_cut!(E, I -&gt; nom::IResult&lt;I, O, E&gt;) =&gt; Err&lt;_, nom::Err&lt;I, E&gt;&gt; OR IResult::Done&lt;I, O&gt; OR IResult::Incomplete&lt;_&gt;`\nLike `cut!`, but with a custom error type.",null,null],[14,"p_nom_error!","","Returns a custom error for a nom parser.",null,null],[14,"p_fail!","","Returns a custom error for a backtracking-controllable parser.",null,null],[14,"p_unwrap!","","Binds monadically without backtracking the result of a backtracking-controllable parser.",null,null],[14,"wrap_nom!","","Wraps the result of a nom parser (`nom::IResult`) to be non-backtracking.",null,null],[14,"p_wrap_nom!","","Wraps a nom parser (returning `nom::IResult`) to produce a parser that does not\nbacktrack on error.",null,null],[14,"p_try!","","Binds monadically without backtracking a backtracking-controllable parser.",null,null]],"paths":[[3,"SimpleLogger"],[3,"FieldInfo"],[3,"MethodInfo"],[3,"ClassFile"],[3,"ExceptionTableEntry"],[3,"BootstrapMethod"],[3,"InnerClass"],[3,"MethodParameter"],[3,"LineNumberInfo"],[3,"LocalVariableInfo"],[3,"LocalVariableTypeInfo"],[4,"AttributeInfo"],[3,"ElementValuePair"],[3,"LocalVariableTargetInfo"],[3,"Annotation"],[3,"TypePathPart"],[3,"TypePath"],[3,"TypeAnnotation"],[4,"ElementValue"],[4,"Tag"],[4,"TargetInfo"],[4,"Tag"],[4,"StackMapFrame"],[4,"Tag"],[4,"VerificationTypeInfo"],[4,"Tag"],[4,"Tag"],[4,"MethodReference"],[4,"ConstantPoolInfo"],[4,"Tag"],[6,"ConstantPool"],[4,"Error"],[3,"ModifiedUtf8Error"],[3,"OneIndexedVec"],[3,"VirtualMachine"],[3,"Class"],[3,"Method"],[4,"MethodCode"],[3,"ClassLoader"],[4,"Error"],[3,"RuntimeConstantPool"],[3,"ModifiedUtf8String"],[4,"RuntimeConstantPoolEntry"],[3,"Frame"],[3,"NativeMethod"],[3,"Scalar"],[3,"Array"],[4,"Value"],[3,"Class"],[3,"Field"],[3,"Method"],[3,"Field"],[3,"Method"],[4,"Type"],[4,"Class"]]};
initSearch(searchIndex);
