#[derive(Debug)]
pub enum Instruction {
    Constant(op::Constant),
    Load(op::Load),
    Store(op::Store),
    Stack(op::Stack),
    Math(op::Math),
    Conversion(op::Conversion),
    Comparison(op::Comparison),
    Control(op::Control),
    Reference(op::Reference),
    Extended(op::Extended),
}

mod op {
    #[derive(Debug)]
    #[allow(non_camel_case_types)]
    pub enum Constant {
        Nop,
        Aconst_null,
        Iconst_m1,
        Iconst_0,
        Iconst_1,
        Iconst_2,
        Iconst_3,
        Iconst_4,
        Iconst_5,
        Lconst_0,
        Lconst_1,
        Fconst_0,
        Fconst_1,
        Fconst_2,
        Dconst_0,
        Dconst_1,
        Bipush,
        Sipush,
        Ldc,
        Ldc_w,
        Ldc2_w,
    }

    #[derive(Debug)]
    #[allow(non_camel_case_types)]
    pub enum Load {
        Iload,
        Lload,
        Fload,
        Dload,
        Aload,
        Iload_0,
        Iload_1,
        Iload_2,
        Iload_3,
        Lload_0,
        Lload_1,
        Lload_2,
        Lload_3,
        Fload_0,
        Fload_1,
        Fload_2,
        Fload_3,
        Dload_0,
        Dload_1,
        Dload_2,
        Dload_3,
        Aload_0,
        Aload_1,
        Aload_2,
        Aload_3,
        Iaload,
        Laload,
        Faload,
        Daload,
        Aaload,
        Baload,
        Caload,
        Saload,
    }

    #[derive(Debug)]
    #[allow(non_camel_case_types)]
    pub enum Store {
        Istore,
        Lstore,
        Fstore,
        Dstore,
        Astore,
        Istore_0,
        Istore_1,
        Istore_2,
        Istore_3,
        Lstore_0,
        Lstore_1,
        Lstore_2,
        Lstore_3,
        Fstore_0,
        Fstore_1,
        Fstore_2,
        Fstore_3,
        Dstore_0,
        Dstore_1,
        Dstore_2,
        Dstore_3,
        Astore_0,
        Astore_1,
        Astore_2,
        Astore_3,
        Iastore,
        Lastore,
        Fastore,
        Dastore,
        Aastore,
        Bastore,
        Castore,
        Sastore,
    }

    #[derive(Debug)]
    #[allow(non_camel_case_types)]
    pub enum Stack {
        Pop,
        Pop2,
        Dup,
        Dup_x1,
        Dup_x2,
        Dup2,
        Dup2_x1,
        Dup2_x2,
        Swap,
    }

    #[derive(Debug)]
    #[allow(non_camel_case_types)]
    pub enum Math {
        Iadd,
        Ladd,
        Fadd,
        Dadd,
        Isub,
        Lsub,
        Fsub,
        Dsub,
        Imul,
        Lmul,
        Fmul,
        Dmul,
        Idiv,
        Ldiv,
        Fdiv,
        Ddiv,
        Irem,
        Lrem,
        Frem,
        Drem,
        Ineg,
        Lneg,
        Fneg,
        Dneg,
        Ishl,
        Lshl,
        Ishr,
        Lshr,
        Iushr,
        Lushr,
        Iand,
        Land,
        Ior,
        Lor,
        Ixor,
        Lxor,
        Iinc,
    }

    #[derive(Debug)]
    pub enum Conversion {
        I2l,
        I2f,
        I2d,
        L2i,
        L2f,
        L2d,
        F2i,
        F2l,
        F2d,
        D2i,
        D2l,
        D2f,
        I2b,
        I2c,
        I2s,
    }

    #[derive(Debug)]
    #[allow(non_camel_case_types)]
    pub enum Comparison {
        Lcmp,
        Fcmpl,
        Fcmpg,
        Dcmpl,
        Dcmpg,
        Ifeq,
        Ifne,
        Iflt,
        Ifge,
        Ifgt,
        Ifle,
        If_icmpeq,
        If_icmpne,
        If_icmplt,
        If_icmpge,
        If_icmpgt,
        If_icmple,
        If_acmpeq,
        If_acmpne,
    }

    #[derive(Debug)]
    pub enum Control {
        Goto,
        Jsr,
        Ret,
        Tableswitch,
        Lookupswitch,
        Ireturn,
        Lreturn,
        Freturn,
        Dreturn,
        Areturn,
        Return,
    }

    #[derive(Debug)]
    pub enum Reference {
        Getstatic,
        Putstatic,
        Getfield,
        Putfield,
        Invokevirtual,
        Invokespecial,
        Invokestatic,
        Invokeinterface,
        Invokedynamic,
        New,
        Newarray,
        Anewarray,
        Arraylength,
        Athrow,
        Checkcast,
        Instanceof,
        Monitorenter,
        Monitorexit,
    }

    #[derive(Debug)]
    #[allow(non_camel_case_types)]
    pub enum Extended {
        Wide,
        Multianewarray,
        Ifnull,
        Ifnonnull,
        Goto_w,
        Jsr_w,
    }
}

